<?php

namespace App\Http\Controllers;

use App\Job;
use App\Person;
use App\Services\PersonService;
use App\Services\RateService;

class HomeController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $data = [
            'title' => 'Home'
        ];
        //get jobs from database, get calculated match rate
        //return: job name, job id, job rate
        //add jobs to $data, limit to 10 results
        $data['all_job_match_rates'] = array_slice($this->getAllJobMatchRates(), 0, 10);
        //check if user is logged in
        if (!session()->exists('person_id')) {
            return view('logged_out_home',  $data);
        }
        return view('logged_in_home',  $data);
    }

    public function demo()
    {
        $data = [
            'title' => 'Demo'
        ];
        return view('demo',  $data);
    }


    /**
     * show data for selected job
     *
     * @param [int] $id
     * @return void
     */
    public function job_insight($id = null)
    {
        if (session()->exists('person_id')) {
            $personId = session()->get('person_id');
        } else {
            return redirect('home')->with('error', 'Your session expired, please login again');
        }
        $jobId = $id;
        //get job name
        $job = Job::getJobById($jobId);
        $jobName = $job['job_name'];

        $workprefsArray = PersonService::getWorkprefsById($personId);

        $driversLicenseRate = RateService::getDriversLicenseRate($personId, $jobId);
        $workprefsRate = RateService::getWorkPrefRate($personId, $jobId);
        $skillsRate = RateService::getSkillsRate($personId, $jobId);
        $averageRate = $this->getAverageRate($jobId);

        $data = [
            'title' => 'Job Insight',
            'average_rate' => $averageRate,
            'job_name' => $jobName,
            'skills_rate' => $skillsRate,
            'drivers_license_rate' => $driversLicenseRate,
            'workprefs_rate' => $workprefsRate,
            'modaltitle' => 'edit work day, time and location preferences',
            'modaltext' => 'select or deselect preferred options.',
            'workprefs_array' => $workprefsArray,
        ];

        return view('job_insight', $data);
    }

    public function getAllJobMatchRates()
    {
        //get all jobs from database
        $jobs = Job::get(['id', 'job_name'])->toArray();
        //need job_id and job_name from jobs table
        //need to go through all jobs, and calculate each rate individually
        foreach ($jobs as $key => $value) {
            //get skills rate
            $jobId = $value['id'];
            $job_rate = $this->getAverageRate($jobId);
            $jobs[$key]['job_rate'] = $job_rate;
        }

        //sort result in descending order
        $column = 'job_rate';
        usort($jobs, function ($a, $b) use ($column) {
            return $b[$column] <=> $a[$column];
        });

        //return full array
        return $jobs;
    }

    /**
     * get the average rate caculated from the other rates
     *
     * @param [int] $jobId
     * @return int
     */
    public  function getAverageRate($jobId)
    {
        if (session()->exists('person_id')) {
            $personId = session()->get('person_id');
        } else {
            return redirect('home')->with('error', 'Your session expired, please login again');
        }

        $person = Person::with('properties')->where('id', $personId)->first();
        $job = Job::with('jobRequirements')->where('id', $jobId)->first();
      
        $rateService = new RateService($person, $job);

        $skillsRate = $rateService->getSkillsRate();
        die;
        $driversLicensesRate = $rateService->getDriversLicenseRate();
        $workPrefsRate = $rateService->getWorkPrefRate();
        $a = [$skillsRate, $driversLicensesRate, $workPrefsRate];
        $a = array_filter($a);
        if (count($a)) {
            $averageRate = array_sum($a) / count($a);
        }

        //get each array item and assign a job_rate to it
        return intval($averageRate);
    }
}
