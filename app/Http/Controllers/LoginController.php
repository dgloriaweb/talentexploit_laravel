<?php

namespace App\Http\Controllers;

use App\Person;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class LoginController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {

        $data = [
            'title' => 'login'
        ];
        return view('login', $data);
    }


    /**
     * Show the form for creating a new resource.
     *
     * @param  \Illuminate\Http\Request $request
     * @param (int) $attempts 
     * @return \Illuminate\Http\Response $response
     * @param App\Person $person
     */
    public function login(Request $request)
    {
        //password test attempts
        $attempts = 3;
        //setup validation
        $validatedData =  $request->validate([
            'username' => ['required', 'max:255'],
            // 'password' => ['required', 'min:8'],
            'password' => ['required'],
        ]);
        $username = $request->input('username');
        //find user by name in the database
        $existingUser = Person::where('username', $username)->first();

        //if user is found, check the password
        if ($existingUser) {
            $passwordMatches = Hash::check($request->input('password'), $existingUser->password);
            
            //if password matches, set session variable and redirect home
            if ($passwordMatches) {
                $request->session()->put('username', $username);
                //return user to home page
                return redirect('home');
            } else {
                return back()->with('error', 'Incorrect password. You have ' . $attempts-- . ' attempts left, if you fail, we lock your account.')
                    ->withInput($request->except('password'));
            }
        } else {
            return back()->with('error', 'Username doesn\'t exist.');
        }
    }


    /**  
     * @param  \Illuminate\Http\Request $request
     * 
     */
    public function logout(Request $request)
    {
        $request->session()->forget('username');
        //return user to home page
        return redirect('home');
    }


    /**  
     * @param  \Illuminate\Http\Request $request
     * 
     */
    public function register()
    {
        $data = [
            'title' => 'register'
        ];
        //return user to home page
        return view('register', $data);
    }

    /**  
     * @param  \Illuminate\Http\Request $request
     * 
     */
    public function storeUser(Request $request)
    {
        $data = [
            'title' => 'register'
        ];
        //setup validation
        $validatedData =  $request->validate([
            'username' => ['required', 'max:255'],
            // 'password' => ['required', 'min:8'],
            'password' => ['required', 'confirmed'],
            'password_confirmation' => ['required'],
        ]);
        $username = $request->input('username');
        $password = Hash::make($request->input('password'));
        // get user from database to check if this name is already in use
        $existingUser = Person::where('username', $username)->first();
        if ($existingUser) {
            return back()->with('error', 'Username already taken, please choose another username!')
                ->withInput($request->except('password'));
        } else {
            //store user
            if (Person::create([
                'username' => $username,
                'password' => $password
            ])) {
                //created successfully

                //return user to home page
                return redirect('home');
            } else {
                echo '<pre>';
                var_dump('could not insert new Person');
                echo '</pre>';
                die;
            }
        }
    }
}
