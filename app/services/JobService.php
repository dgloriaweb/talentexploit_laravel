<?php

namespace App\Services;

use App\Job;
use App\Person;

class JobService
{

    protected $person;

    public function __construct(Person $person)
    {
        $this->person = $person;
    }


    public function getAllJobMatchRates()
    {
        //get all jobs from database
        $jobs = Job::get(['id', 'job_name'])->toArray();
        //need job_id and job_name from jobs table
        //need to go through all jobs, and calculate each rate individually
        foreach ($jobs as $key => $value) {
            //get skills rate
            $jobId = $value['id'];
            $job_rate = $this->getAverageRate($jobId);
            $jobs[$key]['job_rate'] = $job_rate;
        }

        //sort result in descending order
        $column = 'job_rate';
        usort($jobs, function ($a, $b) use ($column) {
            return $b[$column] <=> $a[$column];
        });

        //return full array
        return $jobs;
    }
   /**
     * get the average rate caculated from the other rates
     *
     * @param [int] $jobId
     * @return int
     */
    public  function getAverageRate($jobId)
    {
        $job = Job::with('jobRequirements')->where('id', $jobId)->first();
      
        $rateService = new RateService($this->person, $job);

        $skillsRate = $rateService->getSkillsRate();
        $driversLicensesRate = $rateService->getDriversLicenseRate();
        
        $workPrefsRate = $rateService->getWorkPrefRate();
        $a = [$skillsRate, $driversLicensesRate, $workPrefsRate];
        $a = array_filter($a);
        if (count($a)) {
            $averageRate = array_sum($a) / count($a);
        }

        //get each array item and assign a job_rate to it
        return intval($averageRate);
    }
}

