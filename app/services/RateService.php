<?php

namespace App\Services;

use App\Job;
use App\JobDriversLicense;
use App\MatchDay;
use App\MatchHour;
use App\Person;
use App\Property;

class RateService
{

    //test function
    public static function getAllJobMatchRates()
    {
        //get all jobs from database
        $jobs = Job::get(['id', 'job_name'])->toArray();
        //need job_id and job_name from jobs table
        //need to go through all jobs, and calculate each rate individually
        foreach ($jobs as $key => $value) {
            //get skills rate
            $job_id = $value['id'];
            $job_rate= RateService::getAverageRate($job_id);
            $jobs[$key]['job_rate'] = $job_rate;
        }

        //sort result in descending order
        $column = 'job_rate';
        usort($jobs, function ($a, $b) use ($column) {
            return $b[$column] <=> $a[$column];
        });

        //return full array
        return $jobs;
    }

    /**
     * get the average rate caculated from the other rates
     *
     * @param [int] $job_id
     * @return int
     */
    public static function getAverageRate($job_id)
    {
        if (session()->exists('person_id')) {
            $person_id = session()->get('person_id');
        } else {
            return redirect('home')->with('error', 'Your session expired, please login again');
        }

       $skills_rate = RateService::getSkillsRate($person_id, $job_id);
            $drivers_licenses_rate = RateService::getDriversLicenseRate($person_id, $job_id);
            $work_prefs_rate = RateService::getWorkPrefRate($person_id, $job_id);
            $a = [$skills_rate, $drivers_licenses_rate, $work_prefs_rate];
            $a = array_filter($a);
            if (count($a)) {
                $average_rate = array_sum($a) / count($a);
            }

            //get each array item and assign a job_rate to it
            return intval($average_rate);
    }

    /**
     * Undocumented function
     *
     * @param [int] $person_id
     * @param [int] $job_id
     * @return int
     */
    public static function getWorkPrefRate($person_id, $job_id)
    {
        //hour pref settings
        //person codes
        //get the 5 digit code and pass it to the function to get code for person
        $hour_person_settings_code = PersonService::getPersonWorkPrefHourSettings($person_id);
        //pass the settings_code to the assoc table to get code
        $hour_person_code = PersonService::getPersonWorkPrefHourCode($hour_person_settings_code);

        //job codes
        //get the 5 digit code and pass it to the function to get code for person
        $hour_job_settings_code = JobService::getJobWorkPrefHourSettings($job_id);
        //pass the settings_code to the assoc table to get code
        $hour_job_code = JobService::getJobWorkPrefHourCode($hour_job_settings_code);
        //get result from hour weight database table
        //model: MatchHour, column name: job_code, row name: person_code
        //find row for user, and get the column data from that row
        $person_hour_weights = MatchHour::where('user', $hour_person_code)->first();
        $hour_weight = 0;
        $hour_attributes = array_keys($person_hour_weights->getAttributes());
        foreach ($hour_attributes as $attribute) {
            if ($attribute == $hour_job_code) {
                $hour_weight = $person_hour_weights[$attribute];
                continue;
            }
        }


        //day pref settings
        //person codes
        //get the 5 digit code and pass it to the function to get code for person
        $day_person_settings_code = PersonService::getPersonWorkPrefDaySettings($person_id);
        //pass the settings_code to the assoc table to get code
        $day_person_code = PersonService::getPersonWorkPrefDayCode($day_person_settings_code);

        //job codes
        //get the 5 digit code and pass it to the function to get code for person
        $day_job_settings_code = JobService::getJobWorkPrefDaySettings($job_id);
        //pass the settings_code to the assoc table to get code
        $day_job_code = JobService::getJobWorkPrefDayCode($day_job_settings_code);
        //get result from day weight database table
        //model: Matchday, column name: job_code, row name: person_code
        //find row for user, and get the column data from that row
        $person_day_weights = MatchDay::where('user', $day_person_code)->first();
        $day_weight = 0;
        $day_attributes = array_keys($person_day_weights->getAttributes());
        foreach ($day_attributes as $attribute) {
            if ($attribute == $day_job_code) {
                $day_weight = $person_day_weights[$attribute];
                continue;
            }
        }

        //total achievable score for day and night 
        $total_score = 4 + 6;
        //collected score for day and night 
        $total_day_and_night_score = $hour_weight + $day_weight;

        //match rate
        $workprefs_match_rate = ($total_day_and_night_score / $total_score);
        return  intval($workprefs_match_rate * 100);
    }



    /**
     * Undocumented function
     *
     * @param [int] $person_id
     * @param [int] $job_id
     * @return int
     */
    public static function getDriversLicenseRate($person_id, $job_id)
    {
        //drivers license
        $person_drivers_licenses = Property::getDriversLicense($person_id);
        $array1 = [];
        foreach ($person_drivers_licenses as $person_drivers_license) {
            array_push($array1, $person_drivers_license->drivers_license['drivers_license']);
        }

        //get the job's drivers license array
        $job_drivers_licenses = JobDriversLicense::getJobDriversLicenses($job_id);

        $array2 = [];
        foreach ($job_drivers_licenses as $job_drivers_license) {
            array_push($array2, $job_drivers_license->driver['drivers_license']);
        }
        //if job license is none, then return empty array and return 100% match
        if ($array2[0] == 'none') {
            return  "100%";
        } else {
            //if there is other than none, compare arrays
            //check intersection of the two arrays
            $a = count($array2);
            $b = count(array_intersect($array2, $array1));
            $result = ($b / $a);
            //compare length of intersection array with job array length, return match in percentage
            return  intval($result * 100);
        }
    }
    /**
     * Undocumented function
     *
     * @param [int] $person_id
     * @param [int] $job_id
     * @return int
     */
    public static function getSkillsRate($person_id, $job_id)
    {
        //get person skills
        $person_skills = PropertyService::getSkills($person_id);

        //get job skills
        $job_skills = JobRequirementService::getSkills($job_id);

        $intersect = array_intersect($job_skills, $person_skills);

        //get rate, from job to person
        $result = count($intersect) / count($job_skills);
        return  intval($result * 100);
    }
}
