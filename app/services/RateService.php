<?php

namespace App\Services;

use App\Job;
use App\JobDriversLicense;
use App\MatchDay;
use App\MatchHour;
use App\Person;
use App\Property;

class RateService
{

    //test function
    public static function getAllJobMatchRates()
    {
        //get all jobs from database
        $jobs = Job::get(['id', 'job_name'])->toArray();
        //need job_id and job_name from jobs table
        //need to go through all jobs, and calculate each rate individually
        foreach ($jobs as $key => $value) {
            //get skills rate
            $jobId = $value['id'];
            $job_rate= RateService::getAverageRate($jobId);
            $jobs[$key]['job_rate'] = $job_rate;
        }

        //sort result in descending order
        $column = 'job_rate';
        usort($jobs, function ($a, $b) use ($column) {
            return $b[$column] <=> $a[$column];
        });

        //return full array
        return $jobs;
    }

    /**
     * get the average rate caculated from the other rates
     *
     * @param [int] $jobId
     * @return int
     */
    public static function getAverageRate($jobId)
    {
        if (session()->exists('person_id')) {
            $personId = session()->get('person_id');
        } else {
            return redirect('home')->with('error', 'Your session expired, please login again');
        }

       $skillsRate = RateService::getSkillsRate($personId, $jobId);
            $driversLicensesRate = RateService::getDriversLicenseRate($personId, $jobId);
            $workPrefsRate = RateService::getWorkPrefRate($personId, $jobId);
            $a = [$skillsRate, $driversLicensesRate, $workPrefsRate];
            $a = array_filter($a);
            if (count($a)) {
                $averageRate = array_sum($a) / count($a);
            }

            //get each array item and assign a job_rate to it
            return intval($averageRate);
    }

    /**
     * Undocumented function
     *
     * @param [int] $personId
     * @param [int] $jobId
     * @return int
     */
    public static function getWorkPrefRate($personId, $jobId)
    {
        //hour pref settings
        //person codes
        //get the 5 digit code and pass it to the function to get code for person
        $hourPersonSettingsCode = PersonService::getPersonWorkPrefHourSettings($personId);
        //pass the settings_code to the assoc table to get code
        $hourPersonCode = PersonService::getPersonWorkPrefHourCode($hourPersonSettingsCode);

        //job codes
        //get the 5 digit code and pass it to the function to get code for person
        $hourJobSettingsCode = JobService::getJobWorkPrefHourSettings($jobId);
        //pass the settings_code to the assoc table to get code
        $hourJobCode = JobService::getJobWorkPrefHourCode($hourJobSettingsCode);
        //get result from hour weight database table
        //model: MatchHour, column name: job_code, row name: person_code
        //find row for user, and get the column data from that row
        $personHourWeights = MatchHour::where('user', $hourPersonCode)->first();
        $hourWeight = 0;
        $hourAttributes = array_keys($personHourWeights->getAttributes());
        foreach ($hourAttributes as $attribute) {
            if ($attribute == $hourJobCode) {
                $hourWeight = $personHourWeights[$attribute];
                continue;
            }
        }


        //day pref settings
        //person codes
        //get the 5 digit code and pass it to the function to get code for person
        $dayPersonSettingsCode = PersonService::getPersonWorkPrefDaySettings($personId);
        //pass the settings_code to the assoc table to get code
        $dayPersonCode = PersonService::getPersonWorkPrefDayCode($dayPersonSettingsCode);

        //job codes
        //get the 5 digit code and pass it to the function to get code for person
        $dayJobSettingsCode = JobService::getJobWorkPrefDaySettings($jobId);
        //pass the settings_code to the assoc table to get code
        $dayJobCode = JobService::getJobWorkPrefDayCode($dayJobSettingsCode);
        //get result from day weight database table
        //model: Matchday, column name: job_code, row name: person_code
        //find row for user, and get the column data from that row
        $personDayWeights = MatchDay::where('user', $dayPersonCode)->first();
        $dayWeight = 0;
        $dayAttributes = array_keys($personDayWeights->getAttributes());
        foreach ($dayAttributes as $attribute) {
            if ($attribute == $dayJobCode) {
                $dayWeight = $personDayWeights[$attribute];
                continue;
            }
        }

        //total achievable score for day and night 
        $totalScore = 4 + 6;
        //collected score for day and night 
        $totalDayAndHourScore = $hourWeight + $dayWeight;

        //match rate
        $workprefsMatchRate = ($totalDayAndHourScore / $totalScore);
        return  intval($workprefsMatchRate * 100);
    }



    /**
     * Undocumented function
     *
     * @param [int] $personId
     * @param [int] $jobId
     * @return int
     */
    public static function getDriversLicenseRate($personId, $jobId)
    {
        //drivers license
        $personDriversLicenses = Property::getDriversLicense($personId);
        $array1 = [];
        foreach ($personDriversLicenses as $personDriversLicense) {
            array_push($array1, $personDriversLicense->drivers_license['drivers_license']);
        }

        //get the job's drivers license array
        $jobDriversLicenses = JobDriversLicense::getJobDriversLicenses($jobId);

        $array2 = [];
        foreach ($jobDriversLicenses as $jobDriversLicense) {
            array_push($array2, $jobDriversLicense->driver['drivers_license']);
        }
        //if job license is none, then return empty array and return 100% match
        if ($array2[0] == 'none') {
            return  100;
        } else {
            //if there is other than none, compare arrays
            //check intersection of the two arrays
            $a = count($array2);
            $b = count(array_intersect($array2, $array1));
            $result = ($b / $a);
            //compare length of intersection array with job array length, return match in percentage
            return  intval($result * 100);
        }
    }
    /**
     * Undocumented function
     *
     * @param [int] $personId
     * @param [int] $jobId
     * @return int
     */
    public static function getSkillsRate($personId, $jobId)
    {
        //get person skills
        $personSkills = PropertyService::getSkills($personId);

        //get job skills
        $jobSkills = JobRequirementService::getSkills($jobId);

        $intersect = array_intersect($jobSkills, $personSkills);

        //get rate, from job to person
        $result = count($intersect) / count($jobSkills);
        return  intval($result * 100);
    }
}
