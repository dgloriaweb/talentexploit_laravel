<?php

namespace App;

use Illuminate\Database\Eloquent\Model;


//tablename = people
//foreign key: people_id
class Person extends Model
{
    protected $fillable = ['username', 'password'];

    /**
     * A person has many properties     */
    public function property()
    {
        return $this->hasMany('App\Property');
    }

    public static function getPersonById($person_id)
    {
        return Person::where('id', $person_id)->first();
    }

    public static function getWorkprefsById($person_id)
    {
        $existingUser = Person::getPersonById($person_id);
        if ($existingUser) {
            //setup this->workprefs array with the real user data
            $workprefs_array = [
                'workprefs_array' => [
                    'location' => [
                        'workplace' => $existingUser->workplace,
                        'remote' => $existingUser->remote,
                    ],
                    'days' => [
                        'workdays' => $existingUser->workdays,
                        'saturday' => $existingUser->saturday,
                        'sunday' => $existingUser->sunday,
                        'bank_holidays' => $existingUser->bank_holidays,
                        'sat_sun_bh_only' => $existingUser->sat_sun_bh_only,
                    ],
                    'hours' => [
                        'normal_hours' => $existingUser->normal_hours,
                        'nightshift' => $existingUser->nightshift,
                        'nightshift_only' => $existingUser->nightshift_only,
                        'other_shift' => $existingUser->other_shift,
                        'other_shift_only' => $existingUser->other_shift_only,
                    ],
                    'overtime' => [
                        'overtime' => $existingUser->Overtime
                    ]
                ]
            ];
            return $workprefs_array;
        }
    }
    public static function getFlatWorkprefsById($person_id)
    {
        $existingUser = Person::getPersonById($person_id);
        if ($existingUser) {
            //setup this->workprefs array with the real user data
            $workprefs_array = [
                'workplace' => $existingUser->workplace,
                'remote' => $existingUser->remote,
                'workdays' => $existingUser->workdays,
                'saturday' => $existingUser->saturday,
                'sunday' => $existingUser->sunday,
                'bank_holidays' => $existingUser->bank_holidays,
                'sat_sun_bh_only' => $existingUser->sat_sun_bh_only,
                'normal_hours' => $existingUser->normal_hours,
                'nightshift' => $existingUser->nightshift,
                'nightshift_only' => $existingUser->nightshift_only,
                'other_shift' => $existingUser->other_shift,
                'other_shift_only' => $existingUser->other_shift_only,
                'overtime' => $existingUser->Overtime

            ];
            return $workprefs_array;
        }
    }

    public static function storeWorkPrefChanges($person_id, $array)
    {
        //setup this->workprefs array with the real user data
        Person::where('person_id', $person_id)
            ->update([
                'workplace' => $array['workplace'],
                'remote' => $array['remote'],
                'workdays' => $array['workdays'],
                'saturday' => $array['saturday'],
                'sunday' => $array['sunday'],
                'bank_holidays' => $array['bank_holidays'],
                'sat_sun_bh_only' => $array['sat_sun_bh_only'],
                'normal_hours' => $array['normal_hours'],
                'nightshift' => $array['nightshift'],
                'nightshift_only' => $array['nightshift_only'],
                'other_shift' => $array['other_shift'],
                'other_shift_only' => $array['other_shift_only'],
                'overtime' => $array['overtime']
            ]);

        //success
        return true;
    }
}
